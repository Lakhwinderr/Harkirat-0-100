/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs')
const app = express();

app.use(express.json());

//function to readFile and return the data as arr of objects;

const readTodos = (callback) => {
  fs.readFile('files/todos.json', "utf-8", (err, data) => {
    if (err) {
      console.log('there is error in reading the data.json')
      return callback(undefined);
    }
    return callback(JSON.parse(data));
  })
}

// get the todos 
app.get('/todos', (req, res) => {
  readTodos((data) => {
    if (data) {
      res.status(200).json(data);
      return;
    }
    res.status(404).send("data missing")
  });
})

//function to find todo by id, returns the todo object from the array, if not returns nothing;
const getTodoById = (todos, id) => {
  let output;
  todos.forEach(todo => {
    if (todo.id === id) {
      output = todo;
    }
  })
  return output;
}


app.get('/todos/:id', (req, res) => {
  const id = Number(req.params.id);
  readTodos((data) => {
    const todo = getTodoById(data, id);
    if (!todo) {
      res.status(404).send("todo not found")
      return
    }
    res.status(200).json(todo)
  })
})

//insert  a new todo in the existing data using post request

app.post("/todos", (req, res) => {
  let todo = req.body.todo;
  readTodos((data)=> {
    const id = data.length;
    todo = { ...todo, id: id }
    let newData = [...data, todo];
    fs.writeFile('files/todos.json', JSON.stringify(newData), (err)=> {
        if(err){
          res.status(500).send("problem adding the data")
        }
        res.status(201).send("Added the todo successfully")
    })
  })
})

//update the existing todo to be completed
const updateToDo = (todos, id) => {
  for (const todo of todos) {
    if (id === todo.id) {
      todo.completed = !todo.completed;
      return true;
    }
  }
  return false;
}

app.put('/todos/:id', (req, res) => {
  const id = Number(req.params.id);
  readTodos((data) => {
    let todos = data;
    if (updateToDo(todos, id)) {
      fs.writeFile('files/todos.json', JSON.stringify(todos), (err)=> {
        if(err){
          res.status(500).send("problem adding the data")
          return;
        }
        res.status(200).send("updated the todo");
    })
    return;
    }
    res.status(404).send("todo not found");
  })
})

const deleteToDo = (todos, id) => {
  let newtodos = [];
  let flag = false;
  for (const todo of todos) {
    if(todo.id < id){
      newtodos.push(todo);
    }
    else if (todo.id === id) {
      flag = true;
    } else if(todo.id > id && todo.id < todos.length){
      newtodos.push({...todo, id: todo.id-1})
    }
  }

  if (flag) {
    fs.writeFile('files/todos.json', JSON.stringify(newtodos), (err) => {
      if (err) {
        console.log("error updating new data");
        return;
      }
      console.log("updated the data successfully")
    })
  }
  return flag;
}

app.delete('/todos/:id', (req, res) => {
  const id = Number(req.params.id);
  readTodos(data => {
    if (deleteToDo(data, id)) {
      res.status(200).send("deleted the todo");
      return;
    }
    res.status(404).send("todo not found")
  })  
})

app.use((req,res,next) => {
  res.status(404).send("Route not defined")
})

app.listen(3000, () => {
  console.log("the server is running")
})

module.exports = app;